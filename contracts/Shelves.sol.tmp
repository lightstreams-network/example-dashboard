pragma solidity ^0.5.0;

contract Shelves {

    struct Book {
        string title;
        address owner;
        uint8 price;
        address acl;
        string cover;
        mapping(address => bool) purchasers;
    }

    mapping(string => Book) public shelves; // Key map is the meta
    mapping(address => uint) writeBalance;

    function stackBook(string memory title, uint256 price, string memory cover, string memory meta, address acl) public {
        require(shelves[meta] == 0);
        Book storage newBook;
        newBook.title = title;
        newBook.price = price;
        newBook.acl = acl;
        newBook.owner = msg.sender;
        shelves.meta = newBook;
    }

    function purchase(string memory bookId) public payable {
        require(shelves[bookId] != 0);
        Book memory book = shelves[bookId];
        require(book.price < msg.value);
//        acl.grant("read", msg.sender); // TODO
        shelves[bookId].purchasers.append(msg.sender);
        writeBalance[book.owner] = writeBalance[book.owner] + msg.value;
    }

    function cashOut() public {
        require(writeBalance[msg.sender] != 0);
        writeBalance[msg.sender] = 0;
        msg.sender.transfer(writeBalance[msg.sender]);
    }
}